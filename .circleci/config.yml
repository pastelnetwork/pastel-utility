orbs:
  aws-cli: circleci/aws-cli@2.0.3
  aws-s3: circleci/aws-s3@3.0.0
version: 2.1
defaults: &defaults
  parameters:
    version:
      type: string
      default: "latest"
  docker:
    - image: "circleci/golang:<< parameters.version >>"
  environment:
    GO111MODULE: "on"
   
commands:
  xgo-build:
    parameters:
      sourcesContainerName:
        type: string
      buildContainerName:
        type: string
      package:
        type: string
      targets:
        type: string
      outputDirectory:
        type: string
    steps:
      - run:
          name: "pastelup << parameters.package >>: xgo build for << parameters.targets >>"
          command: |
            export WORKING_DIR=~/project/build/github.com/pastelnetwork
            export MACOS_ARTIFACT=$WORKING_DIR/pastelup-darwin-10.14-amd64
            export WINDOWS_ARTIFACT=$WORKING_DIR/pastelup-windows-4.0-amd64.exe
            export LINUX_ARTIFACT=$WORKING_DIR/pastelup-linux-amd64
            export CIRCLE_TAG=$(git describe --tag)
            export APP_LDFLAGS="-X github.com/pastelnetwork/pastelup/common/version.version=$CIRCLE_TAG" 
            GOPATH= xgo -go latest --targets=<< parameters.targets >> -pkg=<< parameters.package >> -volumesFrom=<< parameters.sourcesContainerName >> -dockerRM=false -dockerContainerName=<< parameters.buildContainerName >> -ldflags "$APP_LDFLAGS"  ./

            mkdir -p << parameters.outputDirectory >>
            docker cp << parameters.buildContainerName >>:/build/. ./<< parameters.outputDirectory >>
            
            ls -R ./<< parameters.outputDirectory >>
            cd ./<< parameters.outputDirectory >>
            if [[ "<< parameters.targets >>" == *"linux/amd64,"* ]]; then
              echo "Create sha256 checksum of linux/amd64 build"
              sha256sum "$LINUX_ARTIFACT" > "$LINUX_ARTIFACT.sha256"
            fi
            if [[ "<< parameters.targets >>" == *"darwin-10.14/amd64,"* ]]; then
              echo "Create sha256 checksum of darwin-10.14/amd64 build"
              sha256sum  "$MACOS_ARTIFACT" > "$MACOS_ARTIFACT.sha256"
            fi
            if [[ "<< parameters.targets >>" == *"windows/amd64,"* ]]; then
              echo "Create sha256 checksum of windows/amd64 build"
              sha256sum "$WINDOWS_ARTIFACT" > "$WINDOWS_ARTIFACT.sha256"
            fi
            ls -R ./*
  create-sources-container:
    parameters:
      containerName:
        type: string
    steps:
      - run:
          name: "Create named docker container << parameters.containerName >> with project's sources"
          command: |
            docker create -v /source --name << parameters.containerName >> ubuntu:18.04 /bin/true
            docker cp ./. << parameters.containerName >>:/source
  github-upload-all-os:
    parameters:
      working_directory:
        type: string
      binaryName:
        type: string
      repo:
        type: string
      targets:
        type: string
    steps:
      - run:
          name: Upload << parameters.targets >> to << parameters.repo >> GitHub repo
          working_directory: << parameters.working_directory >>
          command: |
            export MACOS_ARTIFACT=<< parameters.binaryName >>-darwin-10.14-amd64
            export WINDOWS_ARTIFACT=<< parameters.binaryName >>-windows-4.0-amd64.exe
            export LINUX_ARTIFACT=<< parameters.binaryName >>-linux-amd64
            if [[ "<< parameters.targets >>" == *"linux/amd64,"* ]]; then
              echo "Check existence of linux/amd64 build and upload to GitHub"
              test -f $LINUX_ARTIFACT
              github-release upload --user pastelnetwork --repo << parameters.repo >> --tag $CIRCLE_TAG --name << parameters.binaryName >>-linux-amd64 --file << parameters.binaryName >>-linux-amd64
              github-release upload --user pastelnetwork --repo << parameters.repo >> --tag $CIRCLE_TAG --name << parameters.binaryName >>-linux-amd64.sha256 --file << parameters.binaryName >>-linux-amd64.sha256
            fi
            if [[ "<< parameters.targets >>" == *"darwin-10.14/amd64,"* ]]; then
              echo "Check existence of darwin-10.14/amd64 build and upload to GitHub"
              test -f $MACOS_ARTIFACT
              github-release upload --user pastelnetwork --repo << parameters.repo >> --tag $CIRCLE_TAG --name << parameters.binaryName >>-darwin-amd64 --file << parameters.binaryName >>-darwin-10.14-amd64
              github-release upload --user pastelnetwork --repo << parameters.repo >> --tag $CIRCLE_TAG --name << parameters.binaryName >>-darwin-amd64.sha256 --file << parameters.binaryName >>-darwin-10.14-amd64.sha256
            fi
            if [[ "<< parameters.targets >>" == *"windows/amd64,"* ]]; then
              echo "Check existence of windows/amd64 build and upload to GitHub"
              test -f $WINDOWS_ARTIFACT
              github-release upload --user pastelnetwork --repo << parameters.repo >> --tag $CIRCLE_TAG --name << parameters.binaryName >>-win-amd64.exe --file << parameters.binaryName >>-windows-4.0-amd64.exe
              github-release upload --user pastelnetwork --repo << parameters.repo >> --tag $CIRCLE_TAG --name << parameters.binaryName >>-win-amd64.sha256 --file << parameters.binaryName >>-windows-4.0-amd64.exe.sha256
            fi
  upload-s3:
    parameters:
      working_directory:
        type: string
    steps:
      - run:
          name: prepare binaries
          working_directory: << parameters.working_directory >>
          command: |
            ls -a
            mv pastelup-darwin-10.14-amd64 pastelup-darwin-amd64
            mv pastelup-windows-4.0-amd64.exe pastelup-win-amd64.exe
            ls -a
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      - aws-s3/copy:
          from: << parameters.working_directory >>/pastelup-linux-amd64
          to: s3://$ROOT_BUCKET_NAME/pastelup-linux-amd64
          arguments: |
            --acl public-read \
            --cache-control "max-age=86400"
      - aws-s3/copy:
          from: << parameters.working_directory >>/pastelup-win-amd64.exe
          to: s3://$ROOT_BUCKET_NAME/pastelup-win-amd64.exe
          arguments: |
            --acl public-read \
            --cache-control "max-age=86400"
      - aws-s3/copy:
          from: << parameters.working_directory >>/pastelup-darwin-amd64
          to: s3://$ROOT_BUCKET_NAME/pastelup-darwin-amd64
          arguments: |
            --acl public-read \
            --cache-control "max-age=86400"
      - run: aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_ID --paths /beta/\* 
  
  release:
    parameters:
      buildContainerName:
        type: string
      package:
        type: string
      targets:
        type: string
      binaryName:
        type: string
    steps:
      - xgo-build:
          sourcesContainerName: "sourcesContainer"
          buildContainerName: << parameters.buildContainerName >>
          package: << parameters.package >>
          targets: << parameters.targets >>
          outputDirectory: "build"
      - github-upload-all-os:
          working_directory: "~/project/build/github.com/pastelnetwork"
          binaryName: << parameters.binaryName >>
          repo: "pastelup"
          targets: << parameters.targets >>
      - upload-s3:
          working_directory: "~/project/build/github.com/pastelnetwork"
jobs:
  # Run automated tests
  test:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Print the go version
          command: |
            go version
      - run:
          name: Install revive
          command: |
            go install github.com/mgechev/revive@latest
      - run:
          name: Install staticcheck
          command: |
            go install honnef.co/go/tools/cmd/staticcheck@latest
      - run:
          name: Fetch dependencies
          command: |
            go get -v ./...
      - run:
          name: Run gofmt
          command: |
            diff -u <(echo -n) <(gofmt -d -e .)
      - run:
          name: Run go vet
          command: |
            go vet -v ./...
      - run:
          name: Run revive
          command: |
            revive -config ~/project/.circleci/revive.toml ./...
      - run:
          name: Run staticcheck
          command: |
            staticcheck ./...
      - run:
          name: Run go test
          command: |
            go test -v -race ./...

  # Whenever we create a GitHub release, build binaries for each OS, and upload them into the release
  release:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.2
          docker_layer_caching: true
      - run:
          name: Install github-release
          command: |
            GO111MODULE=off go get github.com/github-release/github-release
      - run:
          name: Install xgo
          command: |
            go install -v github.com/pastelnetwork/xgo@cfada204f14596d56540b02e38526a56d57ddc30
      - create-sources-container:
          containerName: "sourcesContainer"
      - release:
          buildContainerName: "pastelup"
          package: ""
          targets: "linux/amd64,darwin-10.14/amd64,windows/amd64,"
          binaryName: "pastelup"

workflows:
  build-and-test:
    jobs:
      - test:
          filters:
            tags:
              only: /^v.*/
      - release:
          requires:
            - test
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
          context:
            - Release
            - weekly-beta-builds
