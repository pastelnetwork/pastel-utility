orbs:
  gh: circleci/github-cli@2.2.0
  aws-cli: circleci/aws-cli@2.0.3
  aws-s3: circleci/aws-s3@3.0.0
version: 2.1
defaults: &defaults
  machine:
    image: ubuntu-2204:current
  environment:
    GO111MODULE: "on"
   
commands:
  xgo-build:
    parameters:
      targets:
        type: string
      outputDirectory:
        type: string
    steps:
      - run:
          name: "pastelup - xgo build for << parameters.targets >>"
          command: |
            export WORKING_DIR=~/project/github.com/pastelnetwork
            export MACOS_ARTIFACT=$WORKING_DIR/pastelup-darwin-10.14-amd64
            export WINDOWS_ARTIFACT=$WORKING_DIR/pastelup-windows-4.0-amd64.exe
            export LINUX_ARTIFACT=$WORKING_DIR/pastelup-linux-amd64
            cd
            cd project

            export CIRCLE_TAG=$(git describe --tag)
            export APP_LDFLAGS="-X github.com/pastelnetwork/pastelup/common/version.version=$CIRCLE_TAG" 

            ls -R
            xgo -go go-1.20.3 --targets=<< parameters.targets >> -ldflags "$APP_LDFLAGS"  ./

            cd ./github.com/pastelnetwork
            ls -R 

            if [[ "<< parameters.targets >>" == *"linux/amd64,"* ]]; then
              echo "Create sha256 checksum of linux/amd64 build"
              sha256sum "$LINUX_ARTIFACT" > "$LINUX_ARTIFACT.sha256"
            fi
            if [[ "<< parameters.targets >>" == *"darwin-10.14/amd64,"* ]]; then
              echo "Create sha256 checksum of darwin-10.14/amd64 build"
              sha256sum  "$MACOS_ARTIFACT" > "$MACOS_ARTIFACT.sha256"
            fi
            if [[ "<< parameters.targets >>" == *"windows/amd64,"* ]]; then
              echo "Create sha256 checksum of windows/amd64 build"
              sha256sum "$WINDOWS_ARTIFACT" > "$WINDOWS_ARTIFACT.sha256"
            fi
            ls -R ./*
  create-sources-container:
    parameters:
      containerName:
        type: string
    steps:
      - run:
          name: "Create named docker container << parameters.containerName >> with project's sources"
          command: |
            docker create -v /source --name << parameters.containerName >> ubuntu:18.04 /bin/true
            docker cp ./. << parameters.containerName >>:/source
  github-upload-all-os:
    parameters:
      working_directory:
        type: string
      binaryName:
        type: string
      repo:
        type: string
      targets:
        type: string
      release_title:
        type: string
      release_notes:
        type: string
    steps:
      - run:
          name: Upload << parameters.targets >> to << parameters.repo >> GitHub repo
          working_directory: << parameters.working_directory >>
          command: |
            export MACOS_ARTIFACT=<< parameters.binaryName >>-darwin-10.14-amd64
            export WINDOWS_ARTIFACT=<< parameters.binaryName >>-windows-4.0-amd64.exe
            export LINUX_ARTIFACT=<< parameters.binaryName >>-linux-amd64
            echo gh release create ${CIRCLE_TAG} --title \"<< parameters.release_title >>\" --notes \"<< parameters.release_notes >>\"
            gh release create ${CIRCLE_TAG} --title "<< parameters.release_title >>" --notes "<< parameters.release_notes >>"
            if [[ "<< parameters.targets >>" == *"linux/amd64,"* ]]; then
              echo "Check existence of linux/amd64 build and upload to GitHub"
              test -f $LINUX_ARTIFACT
              gh release upload --clobber --repo pastelnetwork/<< parameters.repo >> ${CIRCLE_TAG} << parameters.binaryName >>-linux-amd64 << parameters.binaryName >>-linux-amd64.sha256
            fi
            if [[ "<< parameters.targets >>" == *"darwin-10.14/amd64,"* ]]; then
              echo "Check existence of darwin-10.14/amd64 build and upload to GitHub"
              test -f $MACOS_ARTIFACT
              gh release upload --clobber --repo pastelnetwork/<< parameters.repo >> ${CIRCLE_TAG} << parameters.binaryName >>-darwin-10.14-amd64 << parameters.binaryName >>-darwin-10.14-amd64.sha256
            fi
            if [[ "<< parameters.targets >>" == *"windows/amd64,"* ]]; then
              echo "Check existence of windows/amd64 build and upload to GitHub"
              test -f $WINDOWS_ARTIFACT
              gh release upload --clobber --repo pastelnetwork/<< parameters.repo >> ${CIRCLE_TAG} << parameters.binaryName >>-windows-4.0-amd64.exe << parameters.binaryName >>-windows-4.0-amd64.exe.sha256
            fi
  upload-s3:
    parameters:
      working_directory:
        type: string
      sub_directory:
        type: string
        default: pastelup
    steps:
      - run:
          name: prepare binaries
          working_directory: << parameters.working_directory >>
          command: |
            ls -a
            mv pastelup-darwin-10.14-amd64 pastelup-darwin-amd64
            mv pastelup-windows-4.0-amd64.exe pastelup-win-amd64.exe
            ls -a
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      - aws-s3/copy:
          from: << parameters.working_directory >>/pastelup-linux-amd64
          to: s3://$PASTELUP_BUCKET_NAME/pastelup-linux-amd64
          arguments: |
            --acl public-read \
            --cache-control "max-age=86400"
      - aws-s3/copy:
          from: << parameters.working_directory >>/pastelup-win-amd64.exe
          to: s3://$PASTELUP_BUCKET_NAME/pastelup-win-amd64.exe
          arguments: |
            --acl public-read \
            --cache-control "max-age=86400"
      - aws-s3/copy:
          from: << parameters.working_directory >>/pastelup-darwin-amd64
          to: s3://$PASTELUP_BUCKET_NAME/pastelup-darwin-amd64
          arguments: |
            --acl public-read \
            --cache-control "max-age=86400"
      - run: aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_ID --paths /$PASTELUP_BUCKET_NAME/\* 
  
  release:
    parameters:
      targets:
        type: string
      binaryName:
        type: string
    steps:
      - xgo-build:
          targets: << parameters.targets >>
          outputDirectory: "build"
      - gh/install
      - github-upload-all-os:
          working_directory: "~/project/github.com/pastelnetwork"
          binaryName: << parameters.binaryName >>
          repo: "pastelup"
          targets: << parameters.targets >>
          release_title: ${PASTEL_RELEASE} - $CIRCLE_TAG
          release_notes: Pastel Utility Release - $CIRCLE_TAG
      - upload-s3:
          working_directory: "~/project/github.com/pastelnetwork"
jobs:
  # Run automated tests
  test:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Install Go
          command: |
            cd ..
            wget https://golang.org/dl/go1.20.3.linux-amd64.tar.gz
            sudo rm -r /usr/local/go
            sudo tar -C /usr/local -xzf go1.20.3.linux-amd64.tar.gz
            echo 'export PATH=$PATH:/usr/local/go/bin:~/go/bin' >> ~/.bashrc
            echo 'export CGO_ENABLED=1' >> ~/.bashrc
            echo "export GOPATH=\"$HOME/go\"" >> ~/.bashrc
            echo 'export GOROOT="/usr/local/go"' >> ~/.bashrc
            source ~/.bashrc
            go version
      - run:
          name: Print the go version
          command: |
            go version
      - run:
          name: Install revive
          command: |
            go install github.com/mgechev/revive@latest
      - run:
          name: Install staticcheck
          command: |
            go install honnef.co/go/tools/cmd/staticcheck@latest
      - run:
          name: Fetch dependencies
          command: |
            go get -v ./...
      - run:
          name: Run gofmt
          command: |
            diff -u <(echo -n) <(gofmt -d -e .)
      - run:
          name: Run go vet
          command: |
            go vet -v ./...
      - run:
          name: Run revive
          command: |
            revive -config ~/project/.circleci/revive.toml ./...
      - run:
          name: Run staticcheck
          command: |
            staticcheck ./...
      - run:
          name: Run go test
          command: |
            go test -v -race ./...

  # Whenever we create a GitHub release, build binaries for each OS, and upload them into the release
  release:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Install Go
          command: |
            cd ..
            wget https://golang.org/dl/go1.20.3.linux-amd64.tar.gz
            sudo rm -r /usr/local/go
            sudo tar -C /usr/local -xzf go1.20.3.linux-amd64.tar.gz
            echo 'export PATH=$PATH:/usr/local/go/bin:~/go/bin' >> ~/.bashrc
            echo 'export CGO_ENABLED=1' >> ~/.bashrc
            echo "export GOPATH=\"$HOME/go\"" >> ~/.bashrc
            echo 'export GOROOT="/usr/local/go"' >> ~/.bashrc
            source ~/.bashrc
            go version
      - run:
          name: Install xgo
          command: |
            go install -v src.techknowlogick.com/xgo@v1.7.0+1.19.5
      - create-sources-container:
          containerName: "sourcesContainer"
      - release:
          targets: "linux/amd64,darwin-10.14/amd64,windows/amd64,"
          binaryName: "pastelup"

workflows:
  build-and-test:
    jobs:
      - test:
          filters:
            tags:
              only:
                - /^v.*/
                - circleci_test
      - release:
          requires:
            - test
          filters:
            branches:
              ignore: /.*/
            tags:
              only:
                - /^v.*/
                - circleci_test
          context:
            - Release
            - weekly-beta-builds
